// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follow.sql

package postgresdb

import (
	"context"
)

const createFollower = `-- name: CreateFollower :one
INSERT INTO follows (
    follower_id, following_id
) VALUES (
    $1, $2
) ON CONFLICT DO NOTHING
RETURNING follower_id, following_id, created_at, updated_at
`

type CreateFollowerParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (Follow, error) {
	row := q.db.QueryRow(ctx, createFollower, arg.FollowerID, arg.FollowingID)
	var i Follow
	err := row.Scan(
		&i.FollowerID,
		&i.FollowingID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFollower = `-- name: DeleteFollower :exec
DELETE FROM follows 
WHERE follower_id = $1 AND following_id = $2
`

type DeleteFollowerParams struct {
	FollowerID  int32 `json:"follower_id"`
	FollowingID int32 `json:"following_id"`
}

func (q *Queries) DeleteFollower(ctx context.Context, arg DeleteFollowerParams) error {
	_, err := q.db.Exec(ctx, deleteFollower, arg.FollowerID, arg.FollowingID)
	return err
}
