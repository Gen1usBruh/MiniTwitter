// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comment (
    user_id, tweet_id, retweet_id, parent_comment_id, post_type, content, media
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, tweet_id, retweet_id, parent_comment_id, post_type, content, media, created_at, updated_at
`

type CreateCommentParams struct {
	UserID          int32       `json:"user_id"`
	TweetID         pgtype.Int4 `json:"tweet_id"`
	RetweetID       pgtype.Int4 `json:"retweet_id"`
	ParentCommentID pgtype.Int4 `json:"parent_comment_id"`
	PostType        TweetType   `json:"post_type"`
	Content         string      `json:"content"`
	Media           []byte      `json:"media"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.UserID,
		arg.TweetID,
		arg.RetweetID,
		arg.ParentCommentID,
		arg.PostType,
		arg.Content,
		arg.Media,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TweetID,
		&i.RetweetID,
		&i.ParentCommentID,
		&i.PostType,
		&i.Content,
		&i.Media,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comment
WHERE id = $1 AND user_id = $2
`

type DeleteCommentParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.Exec(ctx, deleteComment, arg.ID, arg.UserID)
	return err
}

const selectComment = `-- name: SelectComment :many
SELECT c.id, c.user_id, u.username, c.content, c.media, c.created_at
FROM comment c
JOIN users u ON c.user_id = u.id
WHERE (
    (c.tweet_id = $1 AND $2 = 'tweet') 
OR
    (c.retweet_id = $1 AND $2 = 'retweet')
) AND 
    ($1 IS NOT NULL AND $2 <> '')
ORDER BY c.created_at
`

type SelectCommentParams struct {
	TweetID pgtype.Int4 `json:"tweet_id"`
	Column2 interface{} `json:"column_2"`
}

type SelectCommentRow struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	Username  string             `json:"username"`
	Content   string             `json:"content"`
	Media     []byte             `json:"media"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) SelectComment(ctx context.Context, arg SelectCommentParams) ([]SelectCommentRow, error) {
	rows, err := q.db.Query(ctx, selectComment, arg.TweetID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectCommentRow{}
	for rows.Next() {
		var i SelectCommentRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Content,
			&i.Media,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
