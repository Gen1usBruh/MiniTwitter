// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refresh_tokens (
    user_id, token, expires_at
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, token, expires_at
`

type CreateTokenParams struct {
	UserID    int32              `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM refresh_tokens
WHERE user_id = $1 AND token = $2
`

type DeleteTokenParams struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.Exec(ctx, deleteToken, arg.UserID, arg.Token)
	return err
}

const selectToken = `-- name: SelectToken :one
SELECT id, user_id, token, expires_at 
FROM refresh_tokens
WHERE user_id = $1 AND 
    token = $2 AND expires_at > NOW()
LIMIT 1
`

type SelectTokenParams struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) SelectToken(ctx context.Context, arg SelectTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, selectToken, arg.UserID, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
	)
	return i, err
}
