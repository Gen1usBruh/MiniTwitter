// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: like.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLikeComment = `-- name: CreateLikeComment :one
INSERT INTO like_comment (
    user_id, comment_id
)
VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
RETURNING id, user_id, comment_id, created_at, updated_at
`

type CreateLikeCommentParams struct {
	UserID    int32 `json:"user_id"`
	CommentID int32 `json:"comment_id"`
}

func (q *Queries) CreateLikeComment(ctx context.Context, arg CreateLikeCommentParams) (LikeComment, error) {
	row := q.db.QueryRow(ctx, createLikeComment, arg.UserID, arg.CommentID)
	var i LikeComment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CommentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLikeTweet = `-- name: CreateLikeTweet :one
INSERT INTO like_tweet (
    user_id, tweet_id, retweet_id, post_type
)
VALUES (
    $1, $2, $3, $4
)
ON CONFLICT DO NOTHING
RETURNING id, user_id, tweet_id, retweet_id, post_type, created_at, updated_at
`

type CreateLikeTweetParams struct {
	UserID    int32       `json:"user_id"`
	TweetID   pgtype.Int4 `json:"tweet_id"`
	RetweetID pgtype.Int4 `json:"retweet_id"`
	PostType  TweetType   `json:"post_type"`
}

func (q *Queries) CreateLikeTweet(ctx context.Context, arg CreateLikeTweetParams) (LikeTweet, error) {
	row := q.db.QueryRow(ctx, createLikeTweet,
		arg.UserID,
		arg.TweetID,
		arg.RetweetID,
		arg.PostType,
	)
	var i LikeTweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TweetID,
		&i.RetweetID,
		&i.PostType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLikeComment = `-- name: DeleteLikeComment :exec
DELETE FROM like_comment
WHERE user_id = $1 AND comment_id = $2
`

type DeleteLikeCommentParams struct {
	UserID    int32 `json:"user_id"`
	CommentID int32 `json:"comment_id"`
}

func (q *Queries) DeleteLikeComment(ctx context.Context, arg DeleteLikeCommentParams) error {
	_, err := q.db.Exec(ctx, deleteLikeComment, arg.UserID, arg.CommentID)
	return err
}

const deleteLikeTweet = `-- name: DeleteLikeTweet :exec
DELETE FROM like_tweet
WHERE user_id = $1 AND 
(   ($2 = 'tweet' AND tweet_id = $3) 
OR
    ($2 = 'retweet' AND retweet_id = $3)
)
`

type DeleteLikeTweetParams struct {
	UserID  int32       `json:"user_id"`
	Column2 interface{} `json:"column_2"`
	TweetID pgtype.Int4 `json:"tweet_id"`
}

func (q *Queries) DeleteLikeTweet(ctx context.Context, arg DeleteLikeTweetParams) error {
	_, err := q.db.Exec(ctx, deleteLikeTweet, arg.UserID, arg.Column2, arg.TweetID)
	return err
}

const selectLikeComment = `-- name: SelectLikeComment :many
SELECT lc.id, lc.user_id, u.username, lc.created_at
FROM like_comment lc
JOIN users u ON lc.user_id = u.id
WHERE lc.comment_id = $1
ORDER BY lc.created_at DESC
`

type SelectLikeCommentRow struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) SelectLikeComment(ctx context.Context, commentID int32) ([]SelectLikeCommentRow, error) {
	rows, err := q.db.Query(ctx, selectLikeComment, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectLikeCommentRow{}
	for rows.Next() {
		var i SelectLikeCommentRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLikeTweet = `-- name: SelectLikeTweet :many
SELECT lt.id, lt.user_id, u.username, lt.created_at
FROM like_tweet lt
JOIN users u ON lt.user_id = u.id
WHERE ( 
    ($1 = 'tweet' AND lt.tweet_id = $2) 
OR
    ($1 = 'retweet' AND lt.retweet_id = $2)
)
ORDER BY lt.created_at DESC
`

type SelectLikeTweetParams struct {
	Column1 interface{} `json:"column_1"`
	TweetID pgtype.Int4 `json:"tweet_id"`
}

type SelectLikeTweetRow struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) SelectLikeTweet(ctx context.Context, arg SelectLikeTweetParams) ([]SelectLikeTweetRow, error) {
	rows, err := q.db.Query(ctx, selectLikeTweet, arg.Column1, arg.TweetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectLikeTweetRow{}
	for rows.Next() {
		var i SelectLikeTweetRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
