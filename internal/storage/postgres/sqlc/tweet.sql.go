// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tweet.sql

package postgresdb

import (
	"context"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO tweet (
    user_id, content, media 
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, content, media, created_at, updated_at
`

type CreateTweetParams struct {
	UserID  int32  `json:"user_id"`
	Content string `json:"content"`
	Media   []byte `json:"media"`
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweet, error) {
	row := q.db.QueryRow(ctx, createTweet, arg.UserID, arg.Content, arg.Media)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Media,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM tweet 
WHERE id = $1
`

func (q *Queries) DeleteTweet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTweet, id)
	return err
}

const selectTweet = `-- name: SelectTweet :one
SELECT id, user_id, content, media, created_at, updated_at FROM tweet 
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectTweet(ctx context.Context, id int32) (Tweet, error) {
	row := q.db.QueryRow(ctx, selectTweet, id)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Media,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
