// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package postgresdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, password, bio 
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, username, email, password, bio, created_at, updated_at
`

type CreateUserParams struct {
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Bio      pgtype.Text `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const selectUserCred = `-- name: SelectUserCred :one
SELECT username, email, password FROM users 
WHERE id = $1 LIMIT 1
`

type SelectUserCredRow struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) SelectUserCred(ctx context.Context, id int32) (SelectUserCredRow, error) {
	row := q.db.QueryRow(ctx, selectUserCred, id)
	var i SelectUserCredRow
	err := row.Scan(&i.Username, &i.Email, &i.Password)
	return i, err
}

const selectUserData = `-- name: SelectUserData :one
SELECT id, username, email, password, bio, created_at, updated_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectUserData(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, selectUserData, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUserFollowers = `-- name: SelectUserFollowers :many
SELECT u.id, u.username, u.bio, f.created_at AS follow_date
FROM follows f
JOIN users u ON f.follower_id = u.id
WHERE f.following_id = $1
ORDER BY f.created_at DESC
`

type SelectUserFollowersRow struct {
	ID         int32              `json:"id"`
	Username   string             `json:"username"`
	Bio        pgtype.Text        `json:"bio"`
	FollowDate pgtype.Timestamptz `json:"follow_date"`
}

func (q *Queries) SelectUserFollowers(ctx context.Context, followingID int32) ([]SelectUserFollowersRow, error) {
	rows, err := q.db.Query(ctx, selectUserFollowers, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectUserFollowersRow{}
	for rows.Next() {
		var i SelectUserFollowersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Bio,
			&i.FollowDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserFollowing = `-- name: SelectUserFollowing :many
SELECT u.id, u.username, u.bio, f.created_at AS follow_date
FROM follows f
JOIN users u ON f.following_id = u.id
WHERE f.follower_id = $1
ORDER BY f.created_at DESC
`

type SelectUserFollowingRow struct {
	ID         int32              `json:"id"`
	Username   string             `json:"username"`
	Bio        pgtype.Text        `json:"bio"`
	FollowDate pgtype.Timestamptz `json:"follow_date"`
}

func (q *Queries) SelectUserFollowing(ctx context.Context, followerID int32) ([]SelectUserFollowingRow, error) {
	rows, err := q.db.Query(ctx, selectUserFollowing, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectUserFollowingRow{}
	for rows.Next() {
		var i SelectUserFollowingRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Bio,
			&i.FollowDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserSignIn = `-- name: SelectUserSignIn :one
SELECT id, username, email, password, bio, created_at, updated_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) SelectUserSignIn(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserSignIn, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserBio = `-- name: UpdateUserBio :exec
UPDATE users 
    set bio = $2 
WHERE id = $1
`

type UpdateUserBioParams struct {
	ID  int32       `json:"id"`
	Bio pgtype.Text `json:"bio"`
}

func (q *Queries) UpdateUserBio(ctx context.Context, arg UpdateUserBioParams) error {
	_, err := q.db.Exec(ctx, updateUserBio, arg.ID, arg.Bio)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users 
    set username = $2 
WHERE id = $1
`

type UpdateUserNameParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.ID, arg.Username)
	return err
}
